Казаков Никита ИТ-8 Лабораторная №1

================================================================================================

Задача 1

Точка координат.  
Создайте сущность Точка, расположенную на двумерной плоскости, которая описывается: 
 Координата Х: число 
 Координата Y: число 
 Может возвращать текстовое представление вида “{X;Y}” 
Необходимо создать три точки с разными координатами и вывести на экран их текстовое 
представление. 

Алгоритм решения:
создаем класс Point с полями x, y
создаем 3 точки с разными координатами

================================================================================================

Задача 2
Текст задачи

 Имена.  
Создайте сущность Имя, которая описывается тремя параметрами: Фамилия, Личное имя, 
Отчество. Имя может быть приведено к строковому виду, включающему традиционное 
представление всех трех параметров: Фамилия Имя Отчество (например “Иванов Иван 
Иванович”). Необходимо предусмотреть возможность того, что какой-либо из параметров может 
быть не задан, и в этом случае он не учитывается при приведении к текстовому виду. 
Необходимо создать следующие имена: 
 Клеопатра 
 Пушкин Александр Сергеевич 
 Маяковский Владимир 
Обратите внимание, что при выводе на экран, не заданные параметры никак не участвуют в 
образовании строки. 


Алгоритм решения:
класс Name с полями lastName, firstName, middleName
в toString() проверяем null/пустые значения
создаем конструкторы для разных комбинаций параметров

================================================================================================

Задача 3
Текст задачи

Прямая. 
Создайте сущность Линия, расположенную на двумерной плоскости, которая описывается: 
 Координата начала: Точка 
 Координата конца: Точка 
 Может возвращать текстовое представление вида “Линия от {X1;Y1} до {X2;Y2}” 
Для указания координат нужно использовать сущность Точка, разработанную в задании 1.1. Создайте 
линии со следующими характеристиками: 
1. Линия 1 с началом в т. {1;3} и концом в т.{23;8}. 
2. Линия 2, горизонтальная, на высоте 10, от точки 5 до точки 25. 
3. Линия 3, которая начинается всегда там же, где начинается линия 1, и заканчивается всегда там 
же, где заканчивается линия 2. Таким образом, если положение первой или второй линии 
меняется, то меняется и третья линия. 
4. После создания всех трех объектов измените координаты первой и второй линий, причем 
сделайте это таким образом, чтобы положение третьей линии соответствовало требованиям 
пункта 3. 
5. Измените координаты первой линии так, чтобы при этом не изменились, координаты третьей 
линии. 

Алгоритм решения:
класс Line с полями start, end (типа Point)
toString(): "Линия от {X1;Y1} до {X2;Y2}"
линия 3 ссылается на те же объекты точек, что линии 1 и 2

================================================================================================

Задача 4
Текст задачи

Города. 
Создайте сущность Город, которая будет представлять собой точку на карте со следующими 
характеристиками: 
 Название города 
 Набор путей к следующим городам, где путь представляет собой сочетание Города и 
стоимости поездки в него. 
Кроме того, Город может возвращать текстовое представление, в виде названия города и списка 
связанных с ним городов (в виде пары: “название:стоимость”). 
Используя разработанную сущность реализуйте схему, представленную на рисунке 2. 

Алгоритм решения:


================================================================================================

Задача 5
Текст задачи

Создаем Города.  
Измените сущность Город из задачи 3.3. Новые требования включают: 
 Город можно создать указав только название 
 Город можно создать указав название и набор связанных с ним городов и стоимостей 
путей к ним 

Алгоритм решения:
создаем класс City с полем name и списком Path
создаем класс Path с полями city, cost
Два конструктора: только название или название + начальные пути

================================================================================================

Задача 6
Текст задачи

Дроби.  
Создайте сущность Дробь со следующими особенностями: 
 Имеет числитель: целое число 
 Имеет знаменатель: целое число 
 Дробь может быть создана с указанием числителя и знаменателя  
 Может вернуть строковое представление вида “числитель/знаменатель” 
 Может выполнять операции сложения, вычитания, умножения и деления с другой Дробью 
или целым числом. Результатом операции должна быть новая Дробь (таким образом, обе 
исходные дроби не изменяются) 
Затем необходимо выполнить следующие задачи: 
1. Создать несколько экземпляров дробей. 
2. Написать по одному примеру использования каждого метода. 
3. Вывести на экран примеры и результаты их выполнения в формате «1/3 * 2/3 = 2/9» 
4. Посчитать f1.sum(f2).div(f3).minus(5)

Алгоритм решения:
создаем класс Fraction с полями numerator, denominator
прописываем методы: sum(), minus(), multiply(), div() (возвращают новые дроби)
Автоматическое упрощение дробей через НОД

